#!/usr/bin/lua5.3
-- Generate bash completion for apk(8) from scdoc manpages

local genhelp = require("genhelp_mod")

-- Applets needing package name completion
local pkg_installed = {
	del=true, fix=true, upgrade=true,
}
local pkg_available = {
	add=true, dot=true, fetch=true, index=true, info=true, list=true,
	manifest=true, mkndx=true, policy=true, query=true, search=true,
}

-- Extract valid applet name and options from a scdoc manpage
local function extract_applet_opts(fn)
	-- Only process files ending with ".8.scd"
	if not fn:match("%.8%.scd$") then
		return nil, nil
	end
	local doc = genhelp.new_scdoc()
	doc:parse(fn)
	local opts = {}
	-- Collect every --flag/-f we can find
	for _, group in ipairs(doc.optgroup or {}) do
		for _, opt in ipairs(group) do
			for flag in opt[1]:gmatch("(%-%-?[%w%-]+)") do
				table.insert(opts, flag)
			end
		end
	end
	return doc.applet, opts
end

local applets, options = {}, {}
for _, fn in ipairs(arg) do
	local applet, opts = extract_applet_opts(fn)
	if not applet then
		-- skip
	elseif fn:match("/apk%.8%.scd$") or fn:match("^apk%.8%.scd$") then
		-- Force main apk(8) page to hold global options
		options["APK"] = opts
	else
		table.insert(applets, applet)
		options[applet] = opts
	end
end

local s_root   = table.concat(applets, " ")
local s_global = table.concat(options["APK"] or {}, " ")

local template_main = [==[
# apk(8) completion										-*- shell-script -*-

# Automatically generated by apk-tools (src/genbash.lua). Do not modify.

# Helpers
__apk_installed_pkgs() { apk query --fields name --installed "$1*" | sed -n 's/^Name: //p' 2>/dev/null; }
__apk_available_pkgs() { apk query --fields name --available "$1*" | sed -n 's/^Name: //p' 2>/dev/null; }

_comp_cmd_apk()
{
	local cur="${COMP_WORDS[COMP_CWORD]}"
	local applet=""

	# Find the applet (first non-option argument)
	for ((i=1; i < COMP_CWORD; i++)); do
		if [[ ${COMP_WORDS[i]} != -* ]]; then
			applet="${COMP_WORDS[i]}"
			break
		fi
	done

	# root / global opts
	if [[ -z "$applet" ]]; then
		if [[ ${cur} == -* ]]; then
			COMPREPLY=($(compgen -W "%s" -- ${cur}))   # GLOBAL OPTIONS
		else
			COMPREPLY=($(compgen -W "%s" -- ${cur}))   # APPLETS
		fi
		return
	fi

	# Handle package completion for applets
	case "$applet" in
%s			;;
		*)
			# For other applets, complete with options
			if [[ ${cur} == -* ]]; then
				COMPREPLY=($(compgen -W "%s" -- ${cur}))
			else
				COMPREPLY=()
			fi
			;;
	esac
}

complete -F _comp_cmd_apk apk
]==]

local template_case = [==[
		%s)
			if [[ ${cur} == -* ]]; then
				COMPREPLY=($(compgen -W "%s" -- ${cur}))
			else
				%s
			fi
]==]

local t_applet = {}
for name, opts in pairs(options) do
	if name ~= "APK" then
		local o = table.concat(opts, " ")
		local pkg_snip = "COMPREPLY=()"
		if pkg_installed[name] then
			pkg_snip = 'COMPREPLY=($(compgen -W "$(__apk_installed_pkgs "${cur}")" -- ${cur}))'
		elseif pkg_available[name] then
			pkg_snip = 'COMPREPLY=($(compgen -W "$(__apk_available_pkgs "${cur}")" -- ${cur}))'
		end
		table.insert(t_applet, string.format(template_case, name, o, pkg_snip))
	end
end
local s_applet = table.concat(t_applet, "\t\t\t;;\n")
-- Get default options for unknown applets
local default_opts = table.concat(options["APK"] or {}, " ")
local render = string.format(template_main, s_global, s_root, s_applet, default_opts)

print(render)
