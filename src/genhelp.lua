#!/usr/bin/lua5.3

--[[
Utility to convert SCDOC manpages to apk-tools help messages

General:
 - Wrangle *apk-applet*(SECTION) links
 - Uppercase _underlined_ things as they are "keywords"
 - Other format specs like ** to be removed
 - For options text, the first sentence (within the first line) is taken as the help text

Main page: apk.8.scd
 - SYNOPSIS
 - COMMANDS has ## header with a table for commands list
 - GLOBAL OPTIONS and COMMIT OPTIONS for option group help
 - NOTES

Applet pages: apk-*.8.scd
 - Take usage from SYNOPSIS, can have multiple lines like apk-version(8)
 - Take DESCRIPTION, take first paragraph, rewrap, and put as section in applet specific help
 - From OPTIONS take each option and it's first sentence (within the first line)
--]]

local genhelp = require("genhelp_mod")

scapp = {
	header = "/* Automatically generated by genhelp.lua. Do not modify. */",
}
scapp.__index = scapp

function scapp:compress_none(data)
	return data
end

function scapp:compress_gzip(data)
	local zlib = require 'zlib'
	local level = 9
	if type(zlib.version()) == "string" then
		-- lua-lzlib interface
		return zlib.compress(data, level)
	else
		-- lua-zlib interface
		return zlib.deflate(level)(data, "finish")
	end
end

function scapp:output_debug(name, data, header)
	local plain_text = data:gsub("\0", "@nil@\n")
	io.stdout:write(plain_text)
end

function scapp:output_help(name, data, header)
	local width = 16
	local cout = self:compress(data)
	if header then print(header) end
	if self.compress ~= self.compress_none then print("#define COMPRESSED_HELP") end
	print(("static const unsigned int payload_%s_size = %d;"):format(name, #data))
	print(("static const unsigned char payload_%s[] = { /* %d bytes */"):format(name, #cout))
	for i = 1, #cout do
		if i % width == 1 then
			io.write("\t")
		end
		--print(cout:byte(i))
		io.write(("0x%02x,"):format(cout:byte(i)))
		if i % width == 0 or i == #cout then
			io.write("\n")
		end
	end
	print("};")
end

function scapp:main(arg)
	self.compress = self.compress_gzip
	self.output = self.output_help

	local f = {}
	for _, fn in ipairs(arg) do
		if fn == '--debug' then
			self.output = self.output_debug
		elseif fn == '--no-zlib' or fn == '--no-compress' then
			self.compress = self.compress_none
		else
			doc = genhelp.new_scdoc()
			doc:parse(fn)
			table.insert(f, doc)
		end
	end
	table.sort(f, function(a, b) return a.applet < b.applet end)

	local out = {}
	for _, doc in ipairs(f) do doc:render(out) end
	for _, doc in ipairs(f) do doc:render_optgroups(out, true) end
	for _, doc in ipairs(f) do doc:render_optgroups(out, false) end

	table.insert(out, "\0")

	self:output("help", table.concat(out))
end

scapp:main(arg)
